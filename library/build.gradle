apply plugin: 'com.android.library'

android {
    compileSdkVersion global_compileSdkVersion
    defaultConfig {
        minSdkVersion global_minSdkVersion
        targetSdkVersion global_targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:support-annotations:$global_supportVersion"
    // okhttp
    implementation "com.squareup.okhttp3:okhttp:$global_okhttpVersion"
    // gson
    implementation "com.google.code.gson:gson:$global_gsonVersion"
    // rxjava/rxandroid
    implementation "io.reactivex.rxjava2:rxjava:$global_rxjavaVersion"
//    implementation "io.reactivex.rxjava2:rxandroid:$global_rxandroidVersion"

    testImplementation "junit:junit:$global_junitVersion"
    androidTestImplementation "com.android.support.test:runner:$global_runnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$global_espressoVersion"
}

// maven push
//apply from: '../mavenupload/maven_push.gradle'

apply plugin: 'com.github.wangjiegulu.plg.rapidmavenpush'
rapidMavenPush {
    printProperties = true
    abortOnError = false
    disable = false
    defaultMavenType = 'local'
    mavens {
        maven {
            mavenType = 'local'
            propertyFiles = [
                    file("${project.rootDir}/mavenupload/maven_common.properties"),
                    file("${project.rootDir}/mavenupload/maven_local.properties")
            ]
            propertyInjectMode = 'replace'
        }
        maven {
            mavenType = 'company'
            propertyFiles = [
                    file("${project.rootDir}/mavenupload/maven_common.properties"),
                    file("${project.rootDir}/mavenupload/maven_company.properties")
            ]
            propertyInjectMode = 'replace'
        }
        maven {
            mavenType = 'central'
            propertyFiles = [
                    file("${project.rootDir}/mavenupload/maven_common.properties"),
                    file("${project.rootDir}/mavenupload/maven_central.properties")
            ]
            propertyInjectMode = 'replace'
        }
    }
}

import com.wangjiegulu.plg.rapidmavenpush.RapidParameterParser
apply plugin: 'com.github.wangjiegulu.plg.rapidmetainf'
project.afterEvaluate {
    // META-INF properties
    rapidmetainf {
        RapidParameterParser rapidParameterParser = new RapidParameterParser(project)
        metaInfName 'DAL_REQUEST.properties'
        metaInfProperties "archiveName=${rapidParameterParser.getStringParameter('POM_ARCHIVE_ID')}",
                "archiveVersion=${rapidParameterParser.getStringParameter('POM_ARCHIVE_VERSION_NAME')}",
                "archiveUrl=${rapidParameterParser.getStringParameter('POM_URL')}",
                "author=${rapidParameterParser.getStringParameter('POM_DEVELOPER_NAME')}",
                "authorEmail=${rapidParameterParser.getStringParameter('POM_DEVELOPER_EMAIL')}"
    }
}

