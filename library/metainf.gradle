task createSDKInformation  {

    def resDir = new File(buildDir, 'generated/dbsdk/')
//    def resDir = new File(buildDir, 'generated/res/resValues/debug/')
    def destDir = new File(resDir, 'META-INF/')

    android {
        sourceSets {
            main.resources {
                srcDir resDir
            }
        }
    }
    doLast {
        println('---- createSDKInformation doLast write...')
        destDir.mkdirs()
        def vfile = new File(destDir, "SDK_INF.properties")

//        def stdout = new ByteArrayOutputStream()
//        exec {
//            commandLine 'git', 'log', '-1', '--format=%H'
//            standardOutput = stdout
//        }
//        def git_hash = stdout.toString().trim()
//
//        stdout.reset()
//        exec {
//            commandLine 'git', 'config', 'remote.origin.url'
//            standardOutput = stdout
//        }
//        def remote = stdout.toString().trim()
//
//        def dirty = exec {
//            commandLine 'git', 'diff-index', '--quiet', 'HEAD'
//            ignoreExitValue true
//        }
//        dirty = dirty.getExitValue() == 0 ?
//                ' (Clean workspace)' : '-DIRTY using dirty workspace!'
//
//        def repo_info = "$remote at $git_hash$dirty"

//        vfile.text = "$repo_info\n"

        vfile.text = "dbarchiveName=$dbarchiveName\n" +
                "dbarchiveVersion=$dbarchiveVersion\n"

        println('---- createSDKInformation doLast end...')
    }
}


project.afterEvaluate {
    tasks.findAll { task ->
        task.name.startsWith('generate') && task.name.endsWith('Resources')
//        task.name.contains('merge') && task.name.contains('Resources')
    }.each { t ->
        t.dependsOn createSDKInformation
    }
}



