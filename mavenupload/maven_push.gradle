println('--> MAVEN gradle apply start.')

//ext.mvnType = "central"
//ext.mvnType = "dangbei"

def mvnType = getParameter("POM_MAVEN_TYPE", "local")

Properties localProperties = new Properties()
File localPropertiesFile = new File("$project.rootDir/mavenupload/$mvnType/maven_push.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
    for (Map.Entry entry : localProperties.entrySet()) {
        project.extensions.extraProperties.set(entry.key.toString(), entry.value)
    }
}

println("--> maven_push.properties inject to ext SUCCEED.")

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

try {
//    if (project.getPlugins().hasPlugin('com.android.application') ||
//            project.getPlugins().hasPlugin('com.android.library')) {
//        apply from: "$project.rootDir/mavenupload/$mvnType/maven_push_task.gradlee"
//    } else if (project.getPlugins().hasPlugin('java')) {
//        apply from: "$project.rootDir/mavenupload/$mvnType/maven_push_jar.gradle"
//    }
    apply from: "$project.rootDir/mavenupload/maven_push_task.gradle"

} catch (Throwable throwable) {
    Throwable realThrowable = null != throwable.cause ? throwable.cause : throwable
    println("[ERROR in apply from 'maven_push_task.gradle']throwable: " + realThrowable.getMessage())
}

println('--> MAVEN gradle apply end.')


def getParameter(String key, Object defaultValue) {
    Object result = defaultValue
    // -D
    String value = System.getProperty(key)
    if (null != value && value.length() > 0) {
        result = value
    } else
    // -P
    if (hasProperty(key)) {
        result = getProperty(key)
    }
    println "[getParameter] key: $key, result: $result, defaultValue: $defaultValue"
    return result
}