// ********************************** upload archives ***********************************
/**
 * Supported properties.
 *
 * #POM_OSSRH_USERNAME=username (command typed)
 * #POM_OSSRH_PASSWORD=password (command typed)
 *
 * # maven repository
 * POM_REPOSITORY_URL=https://oss.sonatype.org/service/local/staging/deploy/maven2/
 * POM_REPOSITORY_URL_SNAPSHOT=https://oss.sonatype.org/content/repositories/snapshots/
 * POM_SIGN=true
 *
 * # project info
 * POM_ARCHIVE_GROUP=com.wangjiegulu
 * #POM_ARCHIVE_VERSION_NAME=0.0.1-SNAPSHOT (command typed)
 * # aar or jar
 * POM_PACKAGING=aar
 * POM_ARCHIVE_ID=dal_request
 * POM_DESC=dal_request
 * POM_URL=https://github.com/wangjiegulu/dal_request
 * POM_SCM_URL=scm:git@github.com:wangjiegulu/dal_request.git
 * POM_SCM_CONNECTION=scm:git@github.com:wangjiegulu/dal_request.git
 * POM_SCM_DEV_CONNECTION=git@github.com:wangjiegulu/dal_request.git
 * POM_LICENCE_NAME=The Apache Software License, Version 2.0
 * POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
 * POM_LICENCE_DIST=wangjie
 * POM_DEVELOPER_ID=wangjie
 * POM_DEVELOPER_NAME=Wang Jie
 * POM_DEVELOPER_EMAIL=tiantian.china.2@gmail.com
 *
 */

/**
 * command support
 *
 * gradle -PversionCMD="1.0.2-SNAPSHOT" :library:uploadArchives
 */

apply plugin: 'maven'

boolean pomSign = getBooleanParameter("POM_SIGN")

if (pomSign) {
    apply plugin: 'signing'
    project.ext."signing.secretKeyRingFile" = "${System.getProperty("user.home")}/.gnupg/secring.gpg"
}

//artifacts {
//     archives file('build/outputs/aar/library-release.aar')
////    archives file: file('build/outputs/aar/library-release.aar')/*, name: 'A', type: 'aar', classifier: 'android'*/
//}

//定义GroupID和Version，ArtefactID会自动使用Project名
group = getStringParameter("POM_ARCHIVE_GROUP")
version = getStringParameter("POM_ARCHIVE_VERSION_NAME")
// packaging -> aar or jar
def pomPackaging = getStringParameter("POM_PACKAGING")

// archives
if ('aar' == pomPackaging) {
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
} else if ('jar' == pomPackaging) {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
//    archives file("$archivePath")
        archives javadocJar, sourcesJar
    }
} else {
    throw new RuntimeException("Unknown packaging: " + packaging)
}

if (pomSign) {
    signing {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (pomSign) {
                //为Pom文件做数字签名
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }

            def pomRepositoryUrl = getStringParameter("POM_REPOSITORY_URL")
            def pomRepositoryUrlSnapshot = getStringParameter("POM_REPOSITORY_URL_SNAPSHOT")
            if(pomRepositoryUrl.startsWith("/")){
                repository(url: uri(pomRepositoryUrl)) {
                    authentication(userName: getStringParameter("POM_OSSRH_USERNAME"), password: getStringParameter("POM_OSSRH_PASSWORD"))
                }
                snapshotRepository(url: uri(pomRepositoryUrlSnapshot)) {
                    authentication(userName: getStringParameter("POM_OSSRH_USERNAME"), password: getStringParameter("POM_OSSRH_PASSWORD"))
                }
            }else{
                repository(url: pomRepositoryUrl) {
                    authentication(userName: getStringParameter("POM_OSSRH_USERNAME"), password: getStringParameter("POM_OSSRH_PASSWORD"))
                }
                snapshotRepository(url: pomRepositoryUrlSnapshot) {
                    authentication(userName: getStringParameter("POM_OSSRH_USERNAME"), password: getStringParameter("POM_OSSRH_PASSWORD"))
                }
            }

//            repository(url: uri('/Users/wangjie/.m2/repository'))

            pom.project {
                name getStringParameter("POM_ARCHIVE_ID")
                artifactId getStringParameter("POM_ARCHIVE_ID")
                packaging pomPackaging
                description getStringParameter("POM_DESC")
                url getStringParameter("POM_URL")

                scm {
                    url getStringParameter("POM_SCM_URL")
                    connection getStringParameter("POM_SCM_CONNECTION")
                    developerConnection getStringParameter("POM_SCM_DEV_CONNECTION")
                }

                licenses {
                    license {
                        name getStringParameter("POM_LICENCE_NAME")
                        url getStringParameter("POM_LICENCE_URL")
                        distribution getStringParameter("POM_LICENCE_DIST")
                    }
                }

                developers {
                    developer {
                        id getStringParameter("POM_DEVELOPER_ID")
                        name getStringParameter("POM_DEVELOPER_NAME")
                        email getStringParameter("POM_DEVELOPER_EMAIL")
                    }
                }
            }

        }
    }
}

def getStringParameter(String key) {
    return String.valueOf(getParameter(key, null))
}

def getBooleanParameter(String key) {
    Object result = getParameter(key, false)
    return Boolean.valueOf(result)
}

def getParameter(String key, Object defaultValue) {
    Object result = defaultValue
    // -D
    String value = System.getProperty(key)
    if (null != value && value.length() > 0) {
        result = value
    } else
    // -P
    if (hasProperty(key)) {
        result = getProperty(key)
    }
    println("[maven_push_task]getParameter, key: $key, value: $result")
    return result
}